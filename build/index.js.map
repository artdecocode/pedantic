{"version":3,"sources":["../src/index.js"],"names":["LOG","processDir","stream","path","content","k","Object","keys","size","reduce","acc","name","totalSize","type","dirContent","fullPath","s","processFile","Promise","r","j","on","d","byteLength","err","pipe","end","Pedantry","PassThrough","constructor","source","e","Error","message","emit"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,UAAT,CAAZ;AAEA;;;;;;AAKA,MAAMC,aAAa,OAAOC,MAAP,EAAeC,IAAf,EAAqBC,UAAU,EAA/B,KAAsC;AACvD,QAAMC,IAAIC,OAAOC,IAAP,CAAYH,OAAZ,CAAV;AAEA,QAAMG,OAAO,kBAAQF,CAAR,CAAb;AAEA,QAAMG,OAAO,MAAMD,KAAKE,MAAL,CAAY,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAClD,QAAIC,YAAY,MAAMF,GAAtB;AACA,UAAM;AAAEG,UAAF;AAAQT,eAASU;AAAjB,QAAgCV,QAAQO,IAAR,CAAtC;AACA,UAAMI,WAAW,mBAAQZ,IAAR,EAAcQ,IAAd,CAAjB;AAEA,QAAIK,CAAJ;;AACA,QAAIH,QAAQ,MAAZ,EAAoB;AAClBG,UAAI,MAAMC,YAAYf,MAAZ,EAAoBa,QAApB,CAAV;AACD,KAFD,MAEO,IAAIF,QAAQ,WAAZ,EAAyB;AAC9BG,UAAI,MAAMf,WAAWC,MAAX,EAAmBa,QAAnB,EAA6BD,UAA7B,CAAV;AACD;;AACDF,iBAAaI,CAAb;AACA,WAAOJ,SAAP;AACD,GAbkB,EAahB,CAbgB,CAAnB;AAeAZ,MAAI,mBAAJ,EAAyBG,IAAzB,EAA+BK,IAA/B;AACA,SAAOA,IAAP;AACD,CAtBD;;AAwBA,MAAMS,cAAc,OAAOf,MAAP,EAAea,QAAf,KAA4B;AAC9C,QAAMP,OAAO,MAAM,IAAIU,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACvC,QAAIJ,IAAI,CAAR;AACA,8BAAiBD,QAAjB,EACGM,EADH,CACM,MADN,EACeC,CAAD,IAAO;AACjBN,WAAKM,EAAEC,UAAP;AACD,KAHH,EAIGF,EAJH,CAIM,OAJN,EAIe,MAAM;AACjBF,QAAEH,CAAF;AACD,KANH,EAOGK,EAPH,CAOM,OAPN,EAOgBG,GAAD,IAAS;AACpBJ,QAAEI,GAAF;AACD,KATH,EAUGC,IAVH,CAUQvB,MAVR,EAUgB;AAAEwB,WAAK;AAAP,KAVhB;AAWD,GAbkB,CAAnB;AAcA1B,MAAI,iBAAJ,EAAuBe,QAAvB,EAAiCP,IAAjC;AACA,SAAOA,IAAP;AACD,CAjBD,C,CAmBA;;;AAEe,MAAMmB,QAAN,SAAuBC,mBAAvB,CAAmC;AAChD;;;;;;AAMAC,cAAYC,MAAZ,EAAoB;AAClB;;AACC,KAAC,YAAY;AACZ,UAAI1B,OAAJ;;AACA,UAAI;AACF,SAAC;AAAEA;AAAF,YAAc,MAAM,+BAAiB0B,MAAjB,CAArB;AACD,OAFD,CAEE,OAAON,GAAP,EAAY;AACZ,cAAMO,IAAI,IAAIC,KAAJ,CAAUR,IAAIS,OAAd,CAAV;AACA,aAAKC,IAAL,CAAU,OAAV,EAAmBH,CAAnB;AACD;;AACD,UAAI;AACF,cAAM9B,WAAW,IAAX,EAAiB6B,MAAjB,EAAyB1B,OAAzB,CAAN;AACD,OAFD,CAEE,OAAOoB,GAAP,EAAY;AACZ,aAAKU,IAAL,CAAU,OAAV,EAAmBV,GAAnB;AACD,OAJD,SAIU;AACR,aAAKE,GAAL;AACD;AACF,KAfA;AAgBF;;AAzB+C","sourcesContent":["import { resolve } from 'path'\nimport { createReadStream } from 'fs'\nimport { PassThrough } from 'stream'\nimport { debuglog } from 'util'\nimport readDirStructure from '@wrote/read-dir-structure'\nimport { getKeys } from './lib'\n\nconst LOG = debuglog('pedantry')\n\n/**\n * @param {Pedantry} stream\n * @param {string} path\n * @param {object} content\n */\nconst processDir = async (stream, path, content = {}) => {\n  const k = Object.keys(content)\n\n  const keys = getKeys(k)\n\n  const size = await keys.reduce(async (acc, name) => {\n    let totalSize = await acc\n    const { type, content: dirContent } = content[name]\n    const fullPath = resolve(path, name)\n\n    let s\n    if (type == 'File') {\n      s = await processFile(stream, fullPath)\n    } else if (type == 'Directory') {\n      s = await processDir(stream, fullPath, dirContent)\n    }\n    totalSize += s\n    return totalSize\n  }, 0)\n\n  LOG('dir %s size: %s B', path, size)\n  return size\n}\n\nconst processFile = async (stream, fullPath) => {\n  const size = await new Promise((r, j) => {\n    let s = 0\n    createReadStream(fullPath)\n      .on('data', (d) => {\n        s += d.byteLength\n      })\n      .on('close', () => {\n        r(s)\n      })\n      .on('error', (err) => {\n        j(err)\n      })\n      .pipe(stream, { end: false })\n  })\n  LOG('file %s :: %s B', fullPath, size)\n  return size\n}\n\n// * @todo implement reading only on read ie change mode\n\nexport default class Pedantry extends PassThrough {\n  /**\n   * @constructor\n   * Upon creation, `Pedantry` will start reading files in the `source` directory recursively in the following order: the content of the `index.md` file will go first, then of all files and directories in the folder recursively in a sorted order, and the content of the `footer.md` file will go last if found.\n   *\n   * @param {string} source Path to the root directory.\n   */\n  constructor(source) {\n    super()\n    ;(async () => {\n      let content\n      try {\n        ({ content } = await readDirStructure(source))\n      } catch (err) {\n        const e = new Error(err.message)\n        this.emit('error', e)\n      }\n      try {\n        await processDir(this, source, content)\n      } catch (err) {\n        this.emit('error', err)\n      } finally {\n        this.end()\n      }\n    })()\n  }\n}\n"],"file":"index.js"}