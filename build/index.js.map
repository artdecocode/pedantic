{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;AAC1B,MAAM,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;AACpC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM;AACnC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;AAC9B,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS;AACvD,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG;;AAE9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;;;;;;;;AAQ/B,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAChF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;;EAE7B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO;;EAE/B,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;IACtB,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI;IAClD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI;;IAE/B,GAAG,CAAC;IACJ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO;IAC/C,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,OAAO;IACnE;IACA,SAAS,CAAC,CAAC,CAAC,CAAC;IACb,MAAM,CAAC;EACT,CAAC,CAAC,CAAC,CAAC;;EAEJ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;EACnC,MAAM,CAAC;AACT;;;;;;;AAOA,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI;EAClC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;EACxB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACR,gBAAgB,CAAC,QAAQ;MACvB,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACT,CAAC;MACD,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;MACL,CAAC;MACD,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,GAAG;MACP,CAAC;MACD,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;EAChC,CAAC;EACD,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI;EACrC,MAAM,CAAC;AACT;;;;AAIA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC;;;;;;;;EAQhD,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,KAAK,CAAC;MACJ,OAAO,CAAC,CAAC,CAAC,KAAK;IACjB,CAAC,CAAC,CAAC,CAAC;IACJ,KAAK,CAAC;IACN,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACZ,GAAG,CAAC;MACJ,GAAG,CAAC;QACF,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC;MAC/C,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;QACZ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO;QAC/B,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACtB;MACA,GAAG,CAAC;QACF,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO;MACtD,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG;MACxB,CAAC,CAAC,OAAO,CAAC;QACR,IAAI,CAAC,GAAG,CAAC;MACX;IACF,CAAC,CAAC,CAAC;EACL;AACF","file":"index.js","sourcesContent":["import { join } from 'path'\nimport { createReadStream } from 'fs'\nimport { PassThrough } from 'stream'\nimport { debuglog } from 'util'\nimport readDirStructure from '@wrote/read-dir-structure'\nimport { getKeys } from './lib'\n\nconst LOG = debuglog('pedantry')\n\n/**\n * @param {Pedantry} stream\n * @param {string} path\n * @param {object} content\n * @param {boolean} [reverse=false]\n */\nconst processDir = async (stream, source, path, content = {}, reverse = false) => {\n  const k = Object.keys(content)\n\n  const keys = getKeys(k, reverse)\n\n  const size = await keys.reduce(async (acc, name) => {\n    let totalSize = await acc\n    const { type, content: dirContent } = content[name]\n    const relPath = join(path, name)\n\n    let s\n    if (type == 'File') {\n      s = await processFile(stream, source, relPath)\n    } else if (type == 'Directory') {\n      s = await processDir(stream, source, relPath, dirContent, reverse)\n    }\n    totalSize += s\n    return totalSize\n  }, 0)\n\n  LOG('dir %s size: %s B', path, size)\n  return size\n}\n\n/**\n *\n * @param {Pedantry} stream\n * @param {string} fullPath\n */\nconst processFile = async (stream, source, path) => {\n  const fullPath = join(source, path)\n  stream.emit('file', path)\n  const size = await new Promise((r, j) => {\n    let s = 0\n    createReadStream(fullPath)\n      .on('data', (d) => {\n        s += d.byteLength\n      })\n      .on('close', () => {\n        r(s)\n      })\n      .on('error', (err) => {\n        j(err)\n      })\n      .pipe(stream, { end: false })\n  })\n  LOG('file %s :: %s B', fullPath, size)\n  return size\n}\n\n// * @todo implement reading only on read ie change mode\n\nexport default class Pedantry extends PassThrough {\n  /**\n   * @constructor\n   * Upon creation, `Pedantry` will start reading files in the `source` directory recursively in the following order: the content of the `index.md` file will go first, then of all files and directories in the folder recursively in a sorted order, and the content of the `footer.md` file will go last if found.\n   * @param {string} source Path to the root directory.\n   * @param {Options} options Options for Pedantry.\n * @param {boolean} [options.reverse=false] Whether to print files in reverse order, i.e., `30-file.md` before `1-file.md`. Default `false`.\n   */\n  constructor(source, options = {}) {\n    const {\n      reverse = false,\n    } = options\n    super()\n    ;(async () => {\n      let content\n      try {\n        ({ content } = await readDirStructure(source))\n      } catch (err) {\n        const e = new Error(err.message)\n        this.emit('error', e)\n      }\n      try {\n        await processDir(this, source, '.', content, reverse)\n      } catch (err) {\n        this.emit('error', err)\n      } finally {\n        this.end()\n      }\n    })()\n  }\n}\n\n/**\n * A file event.\n * @event Pedantry#file\n * @param {string} file A path to the file currently being processed relative to the `Pedantry` source.\n */\n\n/* documentary types/index.xml */\n/**\n * @typedef {Object} Options Options for Pedantry.\n * @prop {boolean} [reverse=false] Whether to print files in reverse order, i.e., `30-file.md` before `1-file.md`. Default `false`.\n */\n"]}